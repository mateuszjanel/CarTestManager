@model DatabaseLayer.Entities.Car

@{
    ViewBag.Title = "Edit";
}

@Styles.Render("~/Content/General.css")

<h2>Edit</h2>

<div class="container">
    <div class="col-lg-6">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Car</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group">
                    @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CarModel, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CarModel, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CarModel, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Engine, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Engine, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Engine, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FuelConsumingPer100km, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(model => model.FuelConsumingPer100km, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FuelConsumingPer100km, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="col-lg-4">
        <div>
            <input type="button" value="New test entry" class="btn btn-default" />
        </div>

        <div>
            @if (Model.Tests != null)
            {
                <table class="table">
                    <tr>
                        <th>Time 0-100km/h [s]</th>
                        <th>Acceleration [km/s^2]</th>
                        <th></th>
                    </tr>
                    @foreach (var item in Model.Tests)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.TimeToHundred)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Acceleration)
                            </td>
                            <td class="k-chart">
                                @(Html.Kendo().Chart()
                                      .Name("chart"+item.Id.ToString())
                                      .Legend(legend => legend
                                          .Visible(false)
                                      )
                                      .Series(series =>
                                      {
                                          series.Bullet(new double?[][] { new double?[] { item.Acceleration, item.Acceleration } });
                                      })
                                      .ChartArea(chartArea => chartArea.Margin(0))
                                      .CategoryAxis(axis => axis
                                          .MajorGridLines(lines => lines.Visible(false))
                                          .MajorTicks(lines => lines.Visible(false))
                                      )
                                      .ValueAxis(axis => axis
                                          .Numeric()
                                          .Min(0)
                                          .Max(30)
                                          .MinorTicks(lines => lines.Visible(true))
                                          .MajorGridLines(lines => lines.Visible(false))
                                          .PlotBands(bands =>
                                          {
                                              bands.Add().From(0).To(10).Color("yellow").Opacity(0.3);
                                              bands.Add().From(10).To(20).Color("orange").Opacity(0.3);
                                              bands.Add().From(20).To(30).Color("red").Opacity(0.3);
                                          })
                                      )
                                      .Tooltip(tooltip => tooltip
                                          .Visible(true)
                                          .Shared(true)
                                          .Template("Maximum: #= value.target # <br /> Average: #= value.current #")
                                      )
                                )
                            </td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>

</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
